<?xml version="1.0"?>
<project name="Scripturian" default="build" xmlns:ivy="antlib:org.apache.ivy.ant">

	<property name="root" location="${basedir}/.." />

	<property file="${root}/build/private.properties" />
	<property file="${root}/build/custom.properties" />

	<property name="component.source" value="${root}/components/${component}/source" />
	<property name="component.resources" value="${root}/components/${component}/resources" />
	<property name="component.notices" value="${root}/components/notices" />
	
	<property name="dependencies" value="${root}/dependencies" />

	<property name="cache" value="${root}/build/cache" />
	<property name="cache.classes" value="${cache}/classes" />
	<property name="cache.jars" value="${cache}/jars" />
	<property name="cache.maven.pom" location="${cache}/maven/pom" />
	<property name="cache.maven.build" location="${cache}/maven/build" />

	<property name="distribution" value="${root}/build/distribution" />
	<property name="distribution.content" value="${distribution}/content" />
	<property name="distribution.libraries" value="${distribution.content}/libraries" />
	<property name="distribution.jars" value="${distribution.libraries}/jars" />
	<property name="distribution.reference" value="${distribution.content}/reference" />
	<property name="distribution.api" value="${distribution.reference}/documentation/api" />
	<property name="distribution.source" value="${distribution.content}/reference/source" />

	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpath="${dependencies}/libraries/jars/org.apache.ivy/ivy/${ivy.version}/ivy.jar" />

	<property name="googlecode" location="${dependencies}/libraries/python/googlecode_upload.py" />
	<macrodef name="googlecode">
		<attribute name="description" />
		<attribute name="suffix" />
		<sequential>
			<exec executable="${googlecode}">
				<arg value="--project=${component}" />
				<arg value="--user=${googlecode.username}" />
				<arg value="--password=${googlecode.password}" />
				<arg value="--summary=@{description} for version ${component.version}${component.version.postfix}" />
				<arg value="--labels=${component.version}${component.version.postfix}" />
				<arg value="${distribution}/${component}-${component.version}${component.version.postfix}@{suffix}" />
			</exec>
		</sequential>
	</macrodef>

	<target name="ivy" description="Settings for Ivy">
		<ivy:settings file="${root}/build/ivy/settings.xml" />
	</target>

	<target name="dependencies" depends="ivy" description="Resolve dependencies">
		<ivy:resolve file="${root}/build/ivy/${component}.xml" type="jar" log="download-only" resolveId="${component}" />
		<ivy:cachepath pathid="dependencies-ivy" type="jar" resolveId="${component}" />
		<path id="dependencies">
			<path refid="dependencies-ivy" />
			<file file="${dependencies.nashorn}" />
		</path>
	</target>

	<target name="classes" depends="dependencies" description="Compile Java code">
		<mkdir dir="${cache.classes}" />
		<javac srcdir="${component.source}" destdir="${cache.classes}" source="${compile.version}" target="${compile.version}" includeAntRuntime="no" debug="${compile.debug}">
			<classpath refid="dependencies" />
			<exclude name="com/threecrickets/scripturian/adapter/jsr223/**" />
			<exclude name="${compile.exclude.nashorn}" />
		</javac>
		<copy todir="${cache.classes}">
			<fileset dir="${component.resources}" />
		</copy>
	</target>

	<target name="javadocs" description="Create API documentation if not present">
		<available file="${distribution.api}" property="javadocs-present" />
		<antcall target="javadocs-overwrite" />
	</target>

	<target name="javadocs-overwrite" depends="dependencies" description="Create API documentation" unless="javadocs-present">
		<javadoc
			destdir="${distribution.api}" sourcepath="${component.source}" excludepackagenames="**.internal.*"
			access="protected" source="${compile.version}"
			windowtitle="${documentation.title} ${component.version}${component.version.postfix}" doctitle="${documentation.title} ${component.version}${component.version.postfix}"
			author="true" splitindex="true" use="true" version="true" nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false">

			<link href="${documentation.jvm}" />
			<!-- Clojure has no online javadocs -->
			<link href="http://commons.apache.org/daemon/apidocs/" />
			<link href="http://groovy.codehaus.org/api/" />
			<link href="http://jepp.sourceforge.net/javadoc/" />
			<link href="http://jruby-embed.kenai.com/docs/" />
			<link href="http://docs.oracle.com/javase/6/docs/api/" /><!-- for javax.script -->
			<!-- Jygments has no online javadocs -->
			<link href="http://www.jython.org/javadoc/" />
			<link href="http://www.caucho.com/resin-javadoc/" />
			<link href="http://www.mozilla.org/rhino/apidocs/" />
			<link href="http://threecrickets.com/api/java/succinct/" />
			<link href="http://velocity.apache.org/engine/releases/velocity-1.7/apidocs/" />
			<classpath refid="dependencies" />
			<bottom>
				<![CDATA[<i>${documentation.copyright}</i>]]>
			</bottom>
		</javadoc>
	</target>
	
	<target name="libraries" depends="classes" description="Create jar">
		<mkdir dir="${distribution.jars}" />
		<jar destfile="${distribution.jars}/${component.group}/${component.artifact}/${component.version}${component.version.postfix}/${component.artifact}.jar" basedir="${cache.classes}" />
	</target>

	<target name="distribution" depends="libraries, javadocs" description="Assemble distribution">
		<copy todir="${distribution.source}/${component.group}/${component.artifact}/${component.version}${component.version.postfix}">
			<fileset dir="${component.source}" />
		</copy>
		<copy todir="${distribution.content}">
			<fileset dir="${component.notices}" />
		</copy>
	</target>
	
	<target name="package" depends="distribution" description="Create distribution package">
		<zip destfile="${distribution}/${component}-${component.version}${component.version.postfix}.zip">
			<fileset dir="${distribution.content}" />
		</zip>
	</target>

	<target name="deploy-maven" if="maven" depends="distribution" description="Deploy to Maven repository">
		<delete dir="${cache.maven.pom}" />
		<delete dir="${cache.maven.build}" />
		<copy todir="${cache.maven.pom}">
			<fileset dir="maven" excludes="**/*~" />
			<filterchain>
				<replacetokens>
					<token key="VERSION" value="${component.version}${component.version.postfix}" />
					<token key="DEPENDENCIES" value="${dependencies.repo}" />
					<token key="CACHE" value="${cache.maven.build}" />
					<token key="CONTENT" value="${distribution.content}" />
				</replacetokens>
			</filterchain>
		</copy>
		<exec executable="${maven}" dir="${cache.maven.pom}">
			<arg value="deploy" />
			<arg value="-DaltDeploymentRepository=default::default::${distribution.repo}" />
		</exec>
	</target>

	<target name="deploy-googlecode" if="googlecode.password" description="Deploy to Google Code">
		<googlecode description="Zip distribution" suffix=".zip" />
	</target>
	
	<target name="build" depends="package" description="Build distribution" />
	
	<target name="clean" description="Clean">
		<delete dir="${cache}" />
		<delete dir="${distribution}" />
	</target>
	
	<target name="rebuild" depends="clean, build" description="First clean and then build distribution" />
	
</project>
